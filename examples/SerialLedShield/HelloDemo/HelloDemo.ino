/*
  HelloDemo.ino

  16(32)個のLEDを利用した文字表現

  JP3の上段を1-2ショートに変更し、
  EXT端子側に16(32)個LEDを接続します。
  再生中は、LEDを扇風機の要領で回転させます。
  残像現象を利用して文字を描画します。

  This example code is in the public domain.
*/
// include library codes
#include <SoftwareSerial.h>
#include <SerialLedController.h> // library

/* Commands Table. Run sequentially. */
const uint8_t led_play_list[][SERIALCOMMAND_FIXEDLEN] =
{
  { 0x94, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* Rec Start. */
  { 0x90, 0x01, 0x00, 0x00, 0x20, 0x00, 0x0A, 0x00 }, /* System */
  { 0x8C, 0x3F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF }, /* Color */
  { 0x8C, 0x3F, 0x00, 0x00, 0x80, 0x01, 0x80, 0x01 }, /* Color */
  { 0x8C, 0x3F, 0x00, 0x00, 0x80, 0x01, 0x80, 0x01 }, /* Color */
  { 0x8C, 0x3F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF }, /* Color */
  { 0x8C, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* Color */
  { 0x8C, 0x3F, 0x2A, 0x00, 0xFF, 0xFF, 0xFF, 0xFF }, /* Color */
  { 0x8C, 0x3F, 0x2A, 0x00, 0x83, 0xC1, 0x83, 0xC1 }, /* Color */
  { 0x8C, 0x3F, 0x2A, 0x00, 0x83, 0xC1, 0x83, 0xC1 }, /* Color */
  { 0x8C, 0x3F, 0x2A, 0x00, 0x03, 0xC0, 0x03, 0xC0 }, /* Color */
  { 0x8C, 0x3F, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* Color */
  { 0x8C, 0x1A, 0x3F, 0x00, 0xFF, 0xFF, 0xFF, 0xFF }, /* Color */
  { 0x8C, 0x1A, 0x3F, 0x00, 0x00, 0xC0, 0x03, 0x00 }, /* Color */
  { 0x8C, 0x1A, 0x3F, 0x00, 0x00, 0xC0, 0x03, 0x00 }, /* Color */
  { 0x8C, 0x1A, 0x3F, 0x00, 0x00, 0xC0, 0x03, 0x00 }, /* Color */
  { 0x8C, 0x1A, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* Color */
  { 0x8C, 0x00, 0x16, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF }, /* Color */
  { 0x8C, 0x00, 0x16, 0x3F, 0x00, 0xC0, 0x03, 0x00 }, /* Color */
  { 0x8C, 0x00, 0x16, 0x3F, 0x00, 0xC0, 0x03, 0x00 }, /* Color */
  { 0x8C, 0x00, 0x16, 0x3F, 0x00, 0xC0, 0x03, 0x00 }, /* Color */
  { 0x8C, 0x00, 0x16, 0x3F, 0x00, 0x00, 0x00, 0x00 }, /* Color */
  { 0x8C, 0x26, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF }, /* Color */
  { 0x8C, 0x26, 0x00, 0x3F, 0x03, 0xC0, 0x03, 0xC0 }, /* Color */
  { 0x8C, 0x26, 0x00, 0x3F, 0x03, 0xC0, 0x03, 0xC0 }, /* Color */
  { 0x8C, 0x26, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF }, /* Color */
  { 0x8C, 0x26, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00 }, /* Color */
  { 0x93, 0x00, 0x00, 0x00, 0xA0, 0x86, 0x01, 0x00 }, /* Loop */
  { 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* Rec End. */
};

// ソフトウェアシリアルのインスタンスを生成する。
// TXとRXのPIN番号を指定する。
// ※シールドのJP1の設定は、上段・下段共に2-3をショート（デフォルト）
SoftwareSerial softSerial(2, 3);

// シリアルコントローラ用ライブラリのインスタンスを生成する。
// リセットとボーレート指定用のPIN番号を指定する。もし利用しない場合は－１を指定する。
SerialLedController controller(4, 5);

void setup()
{
  // シリアルクラスと、通信速度（true:57600, false:19200）を指定する
  controller.begin(&softSerial, true);

  // もしハードウェアシリアルを利用する場合は、以下のように与える
  // ※シールドのJP1の設定は、上段・下段共に1-2をショートとする。
  // Arduinoのシリアルモニタは使えなくなります。
  //controller.begin(&Serial, true);

  // 演出用のテーブルを与える。（コントローラにデータを転送する）  
  if(controller.write(led_play_list, sizeof(led_play_list))){
    // 転送に成功したら演出を開始する。
    controller.start();
  }
}

void loop()
{
}